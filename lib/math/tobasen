case $__script_lib_have_math_tobasen in
1)
	return 0
	;;
esac

case $SCRIPT_LIB_ROOT in
"")
	_libroot=/usr/share/scriptlib
	;;
*)
	_libroot=$SCRIPT_LIB_ROOT
	;;
esac

#
# see 'local usage' for usage.
#
# converts integers to output base, writes stdout, one per line
#
# - 'output base' will be interpreted according to
#   Arithmetic Subsitution/Expansion (ie ``$(( ... ))'').
#
# EXIT STATUS
#
# 0 - everything is cool
# 1 - something wasn't
#
# CAVEATS
#
# valid input bases for the ``n#'' notation are dictated by
# what the shell supports.  in particular, pdksh supports 2-36,
# whereas bash supports 2-63.
#
# COMPATABILITY
# - uses arrays and ``n#'' notation, no dash.
# - '((...))' used instead of '[ ... ]' for perf.
#
tobasen()
{
	local funcname=tobasen
	local usage="$funcname(): usage: $funcname [-b output_base] input_integer [...]"
	local min=1 max=63
	local default_output_base=10
	local output_base
	local ch
	local def_base_input=0
	local _x=0

	OPTIND=1
	while getopts b: ch; do
		case $ch in
		b)
			output_base=$OPTARG
			;;
		*)
			# XXX warnx()
			echo "$usage"
			return 1
			;;
		esac
	done
	if [ $# -gt 1 ]; then
		shift $(( $OPTIND - 1 ))
	fi
	
	if [ -z "$output_base" ]; then
		output_base=default_output_base
	fi
	output_base=$(( output_base )) # math it so we don't have to deal with various chars

	# XXX use isdigit()
	case $output_base in
	*[!0-9]*)
		# XXX warnx()
		echo "$funcname(): invalid output_base: '$output_base'"
		return 1
		;;
	esac
	
	if (( output_base < min )) || (( output_base > max )); then
		# XXX warnx()
		echo "$funcname(): output_base '$output_base' out of range: '$min - $max'"
		return 1
	fi

	#
	# digit character lookup table
	#
	local digit[0]=0

	digit[1]=1 digit[2]=2 digit[3]=3 digit[4]=4 \
	digit[5]=5 digit[6]=6 digit[7]=7 digit[8]=8 \
	digit[9]=9 digit[10]=a digit[11]=b digit[12]=c \
	digit[13]=d digit[14]=e digit[15]=f digit[16]=g \
	digit[17]=h digit[18]=i digit[19]=j digit[20]=k \
	digit[21]=l digit[22]=m digit[23]=n digit[24]=o \
	digit[25]=p digit[26]=q digit[27]=r digit[28]=s \
	digit[29]=t digit[30]=u digit[31]=v digit[32]=w \
	digit[33]=x digit[34]=y digit[35]=z digit[36]=A \
	digit[37]=B digit[38]=C digit[39]=D digit[40]=E \
	digit[41]=F digit[42]=G digit[43]=H digit[44]=I \
	digit[45]=J digit[46]=K digit[47]=L digit[48]=M \
	digit[49]=N digit[50]=O digit[51]=P digit[52]=Q \
	digit[53]=R digit[54]=S digit[55]=T digit[56]=U \
	digit[57]=V digit[58]=W digit[59]=X digit[60]=Y \
	digit[61]=Z digit[62]=@ digit[63]=_

	for input in "$@"; do
		output=''

		#
		# make sure the shell handles this type of
		# input ( eg, ``63#num'' is ok for bash, but
		# unsupported in pdksh ).
		#
		if ! (( input )) >/dev/null 2>&1; then
			# XXX use warnx()
			return 1
		fi

		#
		# convert input into whatever the default base (probably 10)
		# is for ease of working with it (fewer $((...))
		# constructs in this code = easier to read),
		# and also to leave input pristine.
		#
		defbase_input=$(( input ))
		if (( output_base > 1 )); then
			while :; do
				if (( defbase_input < output_base )); then
					output=${digit[defbase_input]}${output}
					break
				else
					output=${digit[defbase_input % output_base]}${output}
					defbase_input=$(( defbase_input / output_base ))
					continue
				fi
				break
			done
		else
			#
			# special case for base(1) numbers
			# because the math that works for
			# the bigger stuff doesn't work here
			#
			x=0
			while (( x < defbase_input )); do
				output=${digit[output_base]}${_output}
				x=$(( x + 1 ))
			done
		fi

		echo "$output"
	done
}

__script_lib_have_math_tobasen=1
