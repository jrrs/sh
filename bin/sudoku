#!/bin/sh

set -e

# sudoku is typically 9 identities (numbers) arranged in an
# ($identities * $identities) field, but can be other sizes
# too.
#
# sudoku grids supported must be a square with L*W == $IDENTITIES,
# furthermore, it must be divisible into $IDENTITIES blocks
# of $IDENTITIES cells.
#
# in other words, the square of an integer, $SIDE_SIZE.
#
SIDE_SIZE=3
IDENTITIES=$((SIDE_SIZE * SIDE_SIZE))

if [ "$SIDE_SIZE" -le 0 ]; then
	echo "square with \$SIDE_SIZE: '$SIDE_SIZE' too small."
	exit 1 
fi

# LOGIC:
# - a solved cell has only one bit set
# - a completely unsolved cell has all bits set
# - as identities are eliminated from possibility, their bits
#   are removed.

# setup bitmask array '${BIT[@]}' and $ALLONES mask.
i=0
while [ "$i" -lt "$IDENTITIES" ]; do
	BIT[i]=$(( 1 << i ))
	DIGIT[BIT[i]]=$i # 
	NUMERAL[i]=$(( i + 1 )) # start at 1 instead of 0
	ALLONES=$(( ALLONES | BIT[i] ))
	i=$(( i + 1 ))
done

# play board is $IDENTITIES squared, with 1 shaved off for start-at-0-ness
FIELDS=$(( (IDENTITIES * IDENTITIES) - 1 ))
i=0
until [ "$i" -gt "$FIELDS" ]; do
	FIELD[i]=$ALLONES
	i=$(( i + 1 ))
done

easy_board()
{
	i=0
	while read line; do
		for cell in $line; do
			case $cell in
			0)
				cell=$ALLONES
				;;
			*)
				cell=${BIT[cell - 1]}
				;;
			esac
			FIELD[i]=$cell
			i=$(( i + 1 ))
		done
	done < sudoku-board
}

# need to make four access methods for traversing board:
# - individual cell
# - row
# - column
# - block

get_row()
{
	local id=$1
	check "$id"
	echo $(( id / IDENTITIES ))
}

get_column()
{
	local id=$1
	check "$id"
	echo $(( id % IDENTITIES ))
}

get_block()
{
	local id=$1
	check "$id"
	# this feels cumbersome but it works >___<
	echo $(( id / SIDE_SIZE % SIDE_SIZE + id / SIDE_SIZE / IDENTITIES * SIDE_SIZE ))
}

check()
{
	local id=$1
	if [ "$id" -gt "$FIELDS" ] || [ "$id" -lt 0 ]; then
		echo "bad id: '$id', $FIELDS"
		exit 1
	fi
	return 0
}

get_cells()
{
	local id=$1 type=$2
	local i=0 j=0 x
	
	check "$id"

	case $type in
	0)
		# row
		x=$(get_row "$id")
		x=$((x * $IDENTITIES)) # first cell in row
		while [ "$i" -lt "$IDENTITIES" ]; do
			echo $(( x + i ))
			i=$(( i + 1 ))
		
		done
		;;
	1)
		# column
		x=$(get_column "$id")
		# by definition, first cell in column == column id
		while [ "$i" -lt "$IDENTITIES" ]; do
			echo $(( x + i * $IDENTITIES ))
			i=$(( i + 1 ))
		done
		;;
	2)
		# block
		x=$(get_block "$id")
	
		x=$(( x / SIDE_SIZE * SIDE_SIZE * IDENTITIES + x % SIDE_SIZE * SIDE_SIZE ))
		# ^^: first cell in block.  so....
		# 
		# 'x / SIDE_SIZE' - block-offset, row-wise
		# 'x % SIDE_SIZE' - block-offset, column-wise
		# 'bo.r * SIDE_SIZE * IDENTITIES' - offset to yield cellId of left-most block's
		#   first cell
		# 'bo.c' - amount to add to left-most first cell to get first cell of habitated
		#   block
		#
		while [ "$i" -lt "$SIDE_SIZE" ]; do
			j=0
			while [ "$j" -lt "$SIDE_SIZE" ]; do
				echo $(( x + i * IDENTITIES + j ))
				j=$(( j + 1 ))
			done
			i=$(( i + 1 ))
		done
		;;
	esac
}

draw()
{
	local i=0 j=0 k=0
	local width=${#FIELDS} # character width

	while [ "$i" -le "$FIELDS" ]; do
		j=0
		while [ "$j" -lt "$IDENTITIES" ]; do
			printf "[%${width}s]" "${DIGIT[FIELD[j+i]]}"
			j=$(( j + 1 ))
			
			if ! (( j % IDENTITIES )); then echo; continue; fi # line break
			if (( j % SIDE_SIZE )); then echo -n " "; fi
		done
		#echo -n " "
		if (( i % SIDE_SIZE )); then echo; fi
		i=$(( i + SIDE_SIZE ))
	done
}


easy_board
#get_cells 80 2
draw
#echo "${NUMERAL[@]}"
#set | grep NUM
#set | grep BIT
##set | grep DIG
